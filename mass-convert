#!/bin/python3
import sys
import os
import getopt
from multiprocessing import Process, Pipe
import subprocess
import time

#TODO:
#generic prefix for video files to specified output
#fancy status dsiplay
#job control and resumption
#bulk renaming
#end todo

# WHERE I LEFT OFF:
# output is formatted, now just need to actually iterate over files, and handle ctrl+c

def usage():
        print( "Usage: $0 [-h] [-i <input filetype>] [-o <output format>] [-d <directory>]")
        print( "Output format defaults to mp4, and directory to current directory")

#deal with arguemnts
inputFormat = "mkv"
outputFormat = "mp4"
directory = os.getcwd();
try:
    opts, args = getopt.getopt(sys.argv[1:], "hi:o:d:", ["help"])
except getopt.GetoptError as err:
    # print help information and exit:
    print(err)
    usage()
    sys.exit(2)

for o, a in opts:
    if o == "-i":
        inputFormat = a
    elif o == "-o":
        outputFormat = a
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    elif o == "-d":
        directory = a
    else:
        assert False, "unhandled option"


#print options
print ("Converting {} to {} in {}.".format(inputFormat, outputFormat, directory))

#change to directory
try:
    os.chdir(directory);
except:
    print("directory does not exist or is not accessable")
    sys.exit(2)

# get list of files to be converted
# get list of directories
seasons = [ f.path for f in os.scandir() if f.is_dir() ]
# for each directory
total = len([ f.path for f in os.scandir() if inputFormat in f.name ])
print ("In parent directory, {} files.".format(total))

for season in seasons:
    #count the files
    fnum = len([ f.path for f in os.scandir(season) if inputFormat in f.name])
    print ("In directory {}, {} episodes.".format(season, fnum))
    total += fnum
print ("In total, {} episodes.".format(total))

ans = input("Do you want to continue? [y/N] ")
if ans != "y" and ans != "Y":
    print ("Exiting.")
    sys.exit(2)





def convert(inputFilename, outputFilename):
    #remove old log file
    if (os.path.isfile("./progressfile")):
        os.remove("./progressfile")
    #create a new log file
    f = open("./progressfile", "x")
    f.close()
    #run the ffmpeg process
    start = time.time()
    p = subprocess.Popen(['ffmpeg', '-y', '-i', inputFilename, '-progress', './progressfile', outputFilename], stderr=subprocess.DEVNULL);
    #print ("ffmpeg -y -i {} -progress ./progressfile {}".format( inputFilename, outputFilename));
    #print out the status of ffmpeg in a not stupid way
    done = overseer(p, inputFilename)
    #print statistcs when done
    print ("Done. Took {} s.".format(done-start))
    os.remove("./progressfile")


def overseer(p, inputFilename):
    #open the old log file
    logf = open("./progressfile", "r");
    #get the filesize
    size = os.path.getsize(inputFilename)
    #convert to KB
    size = size/1024
    print (size)
    # while the conversion is still alive
    while p.poll() is None:
        line = logf.readline()
        if line:
            #generate an eta for the file
            #get the bitrate
            if "bitrate=" in line:
                #covnert it to a number
                bitrate = float(line[8:-8])
            if "total_size=" in line:
                total_size = int(line[11:])
                print(total_size)
                print(bitrate)
                print(size - total_size)
                print("{} seconds. ".format((size - total_size)/bitrate))
                sys.stdout.write("\r")
                #print ("{}".format(line.rstrip()), end="")
    print ()
    return time.time()
        


#now actually go through and do the conversion
for season in seasons:
    #go to season directory
    os.chdir(season)
    #print(os.getcwd())
    episodes = [ f.path for f in os.scandir() if f.name.endswith(inputFormat)]
    for episode in episodes:
        #the input is the episode, the output is the episode with the new ending
        convert(episode, episode[:-len(inputFormat)] + outputFormat);
    print("--")
    os.chdir(directory)
